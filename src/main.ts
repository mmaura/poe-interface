import { Menu, shell, app, Tray, dialog, BrowserWindow, ipcMain } from 'electron'
import fs from 'fs'
import Store from 'electron-store'
import PathOfExileLog from 'poe-log-monitor'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: never;

const schema = {
	poe_log_path: {
		type: 'string',
        // minLength: 0,
        // maxLength: 255,      
		default: 'C:/Program Files (x86)/Grinding Gear Games/Path of Exile/logs/Client.txt'
	},
} as const;

const AppStore  = new Store({ schema });

let AppMainWindow : BrowserWindow

const TrayMenu : Menu = Menu.buildFromTemplate([
  {
      label: 'MainWindow',
      click: () => {
        AppMainWindow.show();
      }

  },
  {
      label: 'site PathOfExile',
      click: () => {
          shell.openExternal('https://www.pathofexile.com/');
      }
  },
  {
      label: '-',
      type: 'separator'
  },
  {
      label: 'Quitter',
      click: () => {
          app.quit();
      }
  }
]);






app.whenReady().then(() => {

  console.log('We are ready to go !')

  // ipcMain.on('hello', (event, arg) => {  
  //   console.log(arg) // prints "ping"
  //   event.reply('asynchronous-reply', 'pong')
  // })
    
  const player = {
    level: 95,
    zone: 'dans la zone',
    name: 'ptiga'
  }
  
  ipcMain.handle('player', (event, arg) => {
    //console.log('player : ' + arg)
    let response : any = { status: 'bad request' };
    if (arg === 'get') {
      response = player
    }
    //console.log('response: ')
    //console.log (response)
    return response
  })

  // ipcMain.on('player', (event, arg)=> {
  //   console.log('player : ' + arg)
  //   let response : any = { status: 'bad request' };
  //   if (arg === 'get') {
  //     response = { status: 'Ok', player: player}
  //   }
  //   console.log('response: ')
  //   console.log (response)
  //   event.reply('player', response)
  // })

  const AppTray : Tray = new Tray('ressources/images/ExaltedOrb_icon.png');
  AppTray.setToolTip('POE Interface');
  AppTray.setContextMenu(TrayMenu)

  AppMainWindow = new BrowserWindow({
    width: 1080,
    height: 1200,
    icon: 'ressources/images/ExaltedOrb_icon.png',
    title: 'POE Interface',
    show: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      //worldSafeExecuteJavaScript: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    }
  });

  // and load the index.html of the app.
  AppMainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  AppMainWindow.webContents.openDevTools();

  AppMainWindow.on('closed', () => {
    AppMainWindow = null
  })

  //Poe Log File
  let poe_log_path = AppStore.get('poe_log_path', '') as string
  console.log(poe_log_path)
  if (!fs.existsSync(poe_log_path)){
    dialog.showOpenDialog({ 
      filters: [    { name: 'poe log file', extensions: ['txt', 'log'] },],
      title: 'Please choose PathOfExile log file', 
      properties: ['openFile', 'showHiddenFiles'], 
      defaultPath: '/mnt/games/SteamLibrary/steamapps/common/Path of Exile/logs/'}).then(result => {
        console.log(result.canceled)
        console.log(result.filePaths)
        if (result.canceled == false) { 
          poe_log_path = result.filePaths[0]
          AppStore.set('poe_log_path', poe_log_path)
        }
      }).catch(err => {
        console.log(err)
      })
  }

  const poelog : PathOfExileLog = new PathOfExileLog({ logfile: poe_log_path});
  poelog.start()

  poelog.on('area', (area) => {
    // Display the area name
    process.stdout.write("Entered 1'" + area.name + "'");
  })

  poelog.on('area', (area) => {
    // Display the area name
    process.stdout.write("Entered 2'" + area.name + "'");
    
  })

})


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
//    app.quit();
// }



// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
// app.on('window-all-closed', () => {
//   if (process.platform !== 'darwin') {
//     app.quit();
//   }
// });

// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//     createWindow();
//   }
// });

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.