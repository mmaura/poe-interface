import { BrowserWindow, dialog,ipcMain } from "electron";
import Store from "electron-store";
import fs from "fs";
import PathOfExileLog from "poe-log-monitor";

import { getCharacterClass } from "./utils";


import InitialAct from "../../resources/data/acts.json";
import InitialClasses from "../../resources/data/classes.json"
import DefaultGuide from "../../resources/data/guide.json";
import InitialGems from "../../resources/data/gems.json";


// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: never;

export function create(): BrowserWindow {
  const InitialData = { acts: InitialAct, classes: InitialClasses, gems: InitialGems} as IInitialData;

  let LevelingGuideWindow: BrowserWindow;
  let LogLoaded = false;

  let MyConn = <plm_conn>{ latency: "na", server: "non connect√©" };
  const MyPlayer = <IAppPlayer>{
    name: "",
    level: 0,
    characterClass: "",
    characterAscendancy: "",
    currentZoneName: "",
    currentZoneAct: 1,
  };


  const schema = {
    poe_log_path: {
      type: "string",
      default:
        "C:/Program Files (x86)/Grinding Gear Games/Path of Exile/logs/Client.txt",
    },
  } as const;
  
  const AppStore = new Store({ schema });
  

  LevelingGuideWindow = new BrowserWindow({
    width: 1080,
    height: 1200,
    icon: "resources/images/ExaltedOrb.png",
    title: "POE Interface",
    show: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      //worldSafeExecuteJavaScript: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  LevelingGuideWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  LevelingGuideWindow.webContents.openDevTools();

  LevelingGuideWindow.on("closed", () => {
    LevelingGuideWindow = null;
  });


  ipcMain.handle("app", (event, arg) => {
    //console.log('player : ' + arg)
    let response: any = { status: "bad request" };

    if (arg === "getInitData") {
      response = {
        MyPlayer: MyPlayer,
        MyConn: MyConn,
        InitialData: InitialData,
        DefaultGuide: DefaultGuide,
      } as IReactAppInit;
      //console.log(POE_PLAYER)
    }
    return response;
  });


  let poe_log_path = AppStore.get("poe_log_path", "") as string;
  console.log(poe_log_path);
  if (!fs.existsSync(poe_log_path)) {
    dialog
      .showOpenDialog({
        filters: [{ name: "poe log file", extensions: ["txt", "log"] }],
        title: "Please choose PathOfExile log file",
        properties: ["openFile", "showHiddenFiles"],
        defaultPath:
          "C:/Program Files (x86)/Grinding Gear Games/Path of Exile/logs/",
      })
      .then((result) => {
        // console.log(result.canceled)
        // console.log(result.filePaths)
        if (result.canceled === false) {
          poe_log_path = result.filePaths[0];
          AppStore.set("poe_log_path", poe_log_path);
        }
      })
      .catch((err) => {
        console.log(err);
      });
  }

  const poeLog: PathOfExileLog = new PathOfExileLog({
    logfile: poe_log_path,
    interval: 500,
  });
  poeLog.start();
  poeLog.parseLog();

  poeLog.on("parsingComplete", (data) => {
    LogLoaded = true;
  });

  poeLog.on("login", (data) => {
    MyConn = data;
    //console.log("Logged in. Gateway: " + data.server + ", Latency: " + data.latency);

    if (LogLoaded === true) LevelingGuideWindow.webContents.send("conn", MyConn);
  });

  poeLog.on("level", (data) => {
    MyPlayer.name = data.name;
    MyPlayer.characterClass = getCharacterClass(InitialData.classes, data.characterClass)
    MyPlayer.characterAscendancy = data.characterClass;
    MyPlayer.level = data.level;

    if (LogLoaded === true) LevelingGuideWindow.webContents.send("player", MyPlayer);
  });

  poeLog.on("area", (area) => {
    if (area.type === "area") {
      // console.log("plm onarea");
      // console.log(area);

      MyPlayer.currentZoneName = area.name;
      MyPlayer.currentZoneAct = area.info[0].act;

      if (LogLoaded === true)
        LevelingGuideWindow.webContents.send("playerArea", MyPlayer);
    }
  });


  return LevelingGuideWindow;
}
