export interface poe_interfaceAPI {
  cleanup: (channel: string) => void
  send: (channel: string, ...arg: any) => Promise<any>
  sendSync: (channel: string, ...arg: any) => Promise<any>
  receive: (channel: string, func: (event: any, ...arg: any) => void) => void
  openExternal: (url: string) => void
  openWiki: (page: string) => void
}

declare global {

  interface Window {
    poe_interfaceAPI: poe_interfaceAPI
  }

  type IAppPlayer = {
    name: string
    level: number
    characterClass: string
    characterAscendancy?: string
    currentZoneName: string
    currentZoneAct: number
  }
  
  interface IAppGems {
    reward: any
    required_lvl: number
    color: string
    isReward: boolean
    isSupport: boolean
    buy: IBuy[]
    name: string
    isVaal: boolean
    gemTags: string[]
    iconPath: string
    isActive: boolean
  }
  /***************************
   * acts.json
   */
// Generated by https://quicktype.io

export interface IActsGuide {
  identity: ActGuideIdentity;
  acts:     IAct[];
}

export interface IAct {
  act:   string;
  actid: number;
  zones: IZone[];
}

export interface IZone {
  hastrial?:           boolean;
  image:              string[];
  note:               string;
  level?:              number;
  name:               string;
  haspassive?:         boolean;
  questRewardsSkills?: boolean;
  altimage:           string;
  quest?:              string;
  hasRecipe?:          boolean;
  hasWaypoint?:       boolean;
  recipe?:            Recipe;
}

export interface Recipe {
  mods:    string[];
  tooltip: string;
}

export interface ActGuideIdentity {
  name: string;
  lang: string;
  filename?: string
  webAssetPath?: string
  sysAssetPath?: string
}

  /***********************
   * classes.json
   */

  export interface IClasses {
    classe?: string
    ascendancy?: string[]
  }

  /**************************
   * guide.json
   */

  // Generated by https://quicktype.io

  export interface IClassesGuide {
    identity: ClassGuideIdentity
    acts: IGuideAct[]
  }

  export interface IGuideAct {
    act: number
    notes?: string
    gears: Gear[]
    treeimage?: string
  }

  export interface Gear {
    name: string
    notes?: string
    gem_info: GemInfo[]
    gems?: IAppGems[]
    chasses?: string[]
  }

  export interface GemInfo {
    name: string
    note?: string
  }

  export interface ClassGuideIdentity {
    name: string
    lang: string
    class: string
    url: string
    filename?: string
    webAssetPath?: string
    sysAssetPath?: string
  }

  /**************************
   * gems.json
   */

  // Generated by https://quicktype.io

  export interface IGems {
    reward: IReward
    required_lvl: number
    color: string
    isReward: boolean
    isSupport: boolean
    buy: IBuy[]
    name: string
    isVaal: boolean
    gemTags: string[]
    iconPath: string
    isActive: boolean
    alt_name?: string[]
  }

  export interface IBuy {
    npc: string
    act: number
    town: string
    available_to: string[]
    quest_name: string
  }

  // export enum AvailableTo {
  //   Duelist = "Duelist",
  //   Marauder = "Marauder",
  //   Ranger = "Ranger",
  //   Scion = "Scion",
  //   Shadow = "Shadow",
  //   Templar = "Templar",
  //   Witch = "Witch",
  // }

  // export enum Npc {
  //   Clarissa = "Clarissa",
  //   LillyRoth = "Lilly Roth",
  //   Nessa = "Nessa",
  //   PetarusAndVanja = "Petarus and Vanja",
  //   Siosa = "Siosa",
  //   Yeena = "Yeena",
  // }

  // export enum QuestName {
  //   AFixtureOfFate = "A Fixture of Fate",
  //   BreakingSomeEggs = "Breaking Some Eggs",
  //   BreakingTheSeal = "Breaking the Seal",
  //   EnemyAtTheGate = "Enemy at the Gate",
  //   FallenFromGrace = "Fallen from Grace",
  //   IntrudersInBlack = "Intruders in Black",
  //   LostInLove = "Lost in Love",
  //   MercyMission = "Mercy Mission",
  //   SeverTheRightHand = "Sever the Right Hand",
  //   SharpAndCruel = "Sharp and Cruel",
  //   TheCagedBrute = "The Caged Brute",
  //   TheEternalNightmare = "The Eternal Nightmare",
  //   TheRootOfTheProblem = "The Root of the Problem",
  //   TheSirenSCadence = "The Siren's Cadence",
  // }

  // export enum Town {
  //   Highgate = "Highgate",
  //   LioneyeSWatch = "Lioneye's Watch",
  //   TheForestEncampment = "The Forest Encampment",
  //   TheLibrary = "The Library",
  //   TheSarnEncampment = "The Sarn Encampment",
  // }

  // export enum EColor {
  //   Blue = "blue",
  //   Green = "green",
  //   Red = "red",
  //   White = "white",
  // }

  export interface IReward {
    rien?: number
  }

  // Generated by https://quicktype.io

  export interface IRichText {
    data: string[]
    classe: string
  }
}
